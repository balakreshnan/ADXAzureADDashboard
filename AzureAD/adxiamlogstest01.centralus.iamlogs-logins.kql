
// Create table command
////////////////////////////////////////////////////////////
.create table ['adtest']  (['rectime']:datetime, ['resourceId']:string, ['operationName']:string, ['operationVersion']:string, ['category']:string, ['tenantId']:guid, ['resultType']:timespan, ['resultSignature']:string, ['durationMs']:timespan, ['callerIpAddress']:string, ['correlationId']:guid, ['identity']:string, ['Level']:timespan, ['location']:string, ['properties_id']:guid, ['properties_resourceTenantId']:guid, ['properties_mfaDetail_authMethod']:string, ['properties_resourceId']:guid, ['properties_processingTimeInMilliseconds']:long, ['properties_tokenIssuerName']:string, ['properties_deviceDetail_isManaged']:bool, ['properties_deviceDetail_displayName']:string, ['properties_deviceDetail_deviceId']:string, ['properties_deviceDetail_operatingSystem']:string, ['properties_deviceDetail_browser']:string, ['properties_deviceDetail_isCompliant']:bool, ['properties_deviceDetail_trustType']:string, ['properties_correlationId']:guid, ['properties_incomingTokenType']:string, ['properties_createdDateTime']:datetime, ['properties_authenticationRequirementPolicies']:dynamic, ['properties_appliedConditionalAccessPolicies']:dynamic, ['properties_location_city']:string, ['properties_location_state']:string, ['properties_location_countryOrRegion']:string, ['properties_location_geoCoordinates']:dynamic, ['properties_riskDetail']:string, ['properties_isInteractive']:bool, ['properties_userDisplayName']:string, ['properties_riskEventTypes']:dynamic, ['properties_userId']:guid, ['properties_userPrincipalName']:string, ['properties_tokenIssuerType']:string, ['properties_appId']:guid, ['properties_authenticationDetails']:dynamic, ['properties_appDisplayName']:string, ['properties_ipAddress']:string, ['properties_status_errorCode']:long, ['properties_status_additionalDetails']:string, ['properties_authenticationProcessingDetails']:dynamic, ['properties_clientAppUsed']:string, ['properties_userAgent']:string, ['properties_conditionalAccessStatus']:string, ['properties_authenticationContextClassReferences']:dynamic, ['properties_originalRequestId']:guid, ['properties_isTenantRestricted']:bool, ['properties_networkLocationDetails']:dynamic, ['properties_clientCredentialType']:string, ['properties_riskLevelAggregated']:string, ['properties_riskLevelDuringSignIn']:string, ['properties_riskState']:string, ['properties_signInIdentifier']:string, ['properties_riskEventTypes_v2']:dynamic, ['properties_resourceDisplayName']:string, ['properties_resourceServicePrincipalId']:guid, ['properties_homeTenantId']:guid, ['properties_authenticationRequirement']:string, ['properties_alternateSignInName']:string, ['properties_servicePrincipalId']:string, ['properties_userType']:string, ['properties_flaggedForReview']:bool, ['properties_autonomousSystemNumber']:long, ['properties_crossTenantAccessType']:string, ['properties_ssoExtensionVersion']:string, ['properties_uniqueTokenIdentifier']:string, ['properties_authenticationProtocol']:string, ['properties_rngcStatus']:long)

// Create mapping command
////////////////////////////////////////////////////////////
.create table ['adtest'] ingestion json mapping 'adtest_mapping' '[{"column":"rectime", "Properties":{"Path":"$[\'rectime\']"}},{"column":"resourceId", "Properties":{"Path":"$[\'resourceId\']"}},{"column":"operationName", "Properties":{"Path":"$[\'operationName\']"}},{"column":"operationVersion", "Properties":{"Path":"$[\'operationVersion\']"}},{"column":"category", "Properties":{"Path":"$[\'category\']"}},{"column":"tenantId", "Properties":{"Path":"$[\'tenantId\']"}},{"column":"resultType", "Properties":{"Path":"$[\'resultType\']"}},{"column":"resultSignature", "Properties":{"Path":"$[\'resultSignature\']"}},{"column":"durationMs", "Properties":{"Path":"$[\'durationMs\']"}},{"column":"callerIpAddress", "Properties":{"Path":"$[\'callerIpAddress\']"}},{"column":"correlationId", "Properties":{"Path":"$[\'correlationId\']"}},{"column":"identity", "Properties":{"Path":"$[\'identity\']"}},{"column":"Level", "Properties":{"Path":"$[\'Level\']"}},{"column":"location", "Properties":{"Path":"$[\'location\']"}},{"column":"properties_id", "Properties":{"Path":"$[\'properties\'][\'id\']"}},{"column":"properties_resourceTenantId", "Properties":{"Path":"$[\'properties\'][\'resourceTenantId\']"}},{"column":"properties_mfaDetail_authMethod", "Properties":{"Path":"$[\'properties\'][\'mfaDetail\'][\'authMethod\']"}},{"column":"properties_resourceId", "Properties":{"Path":"$[\'properties\'][\'resourceId\']"}},{"column":"properties_processingTimeInMilliseconds", "Properties":{"Path":"$[\'properties\'][\'processingTimeInMilliseconds\']"}},{"column":"properties_tokenIssuerName", "Properties":{"Path":"$[\'properties\'][\'tokenIssuerName\']"}},{"column":"properties_deviceDetail_isManaged", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'isManaged\']"}},{"column":"properties_deviceDetail_displayName", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'displayName\']"}},{"column":"properties_deviceDetail_deviceId", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'deviceId\']"}},{"column":"properties_deviceDetail_operatingSystem", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'operatingSystem\']"}},{"column":"properties_deviceDetail_browser", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'browser\']"}},{"column":"properties_deviceDetail_isCompliant", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'isCompliant\']"}},{"column":"properties_deviceDetail_trustType", "Properties":{"Path":"$[\'properties\'][\'deviceDetail\'][\'trustType\']"}},{"column":"properties_correlationId", "Properties":{"Path":"$[\'properties\'][\'correlationId\']"}},{"column":"properties_incomingTokenType", "Properties":{"Path":"$[\'properties\'][\'incomingTokenType\']"}},{"column":"properties_createdDateTime", "Properties":{"Path":"$[\'properties\'][\'createdDateTime\']"}},{"column":"properties_authenticationRequirementPolicies", "Properties":{"Path":"$[\'properties\'][\'authenticationRequirementPolicies\']"}},{"column":"properties_appliedConditionalAccessPolicies", "Properties":{"Path":"$[\'properties\'][\'appliedConditionalAccessPolicies\']"}},{"column":"properties_location_city", "Properties":{"Path":"$[\'properties\'][\'location\'][\'city\']"}},{"column":"properties_location_state", "Properties":{"Path":"$[\'properties\'][\'location\'][\'state\']"}},{"column":"properties_location_countryOrRegion", "Properties":{"Path":"$[\'properties\'][\'location\'][\'countryOrRegion\']"}},{"column":"properties_location_geoCoordinates", "Properties":{"Path":"$[\'properties\'][\'location\'][\'geoCoordinates\']"}},{"column":"properties_riskDetail", "Properties":{"Path":"$[\'properties\'][\'riskDetail\']"}},{"column":"properties_isInteractive", "Properties":{"Path":"$[\'properties\'][\'isInteractive\']"}},{"column":"properties_userDisplayName", "Properties":{"Path":"$[\'properties\'][\'userDisplayName\']"}},{"column":"properties_riskEventTypes", "Properties":{"Path":"$[\'properties\'][\'riskEventTypes\']"}},{"column":"properties_userId", "Properties":{"Path":"$[\'properties\'][\'userId\']"}},{"column":"properties_userPrincipalName", "Properties":{"Path":"$[\'properties\'][\'userPrincipalName\']"}},{"column":"properties_tokenIssuerType", "Properties":{"Path":"$[\'properties\'][\'tokenIssuerType\']"}},{"column":"properties_appId", "Properties":{"Path":"$[\'properties\'][\'appId\']"}},{"column":"properties_authenticationDetails", "Properties":{"Path":"$[\'properties\'][\'authenticationDetails\']"}},{"column":"properties_appDisplayName", "Properties":{"Path":"$[\'properties\'][\'appDisplayName\']"}},{"column":"properties_ipAddress", "Properties":{"Path":"$[\'properties\'][\'ipAddress\']"}},{"column":"properties_status_errorCode", "Properties":{"Path":"$[\'properties\'][\'status\'][\'errorCode\']"}},{"column":"properties_status_additionalDetails", "Properties":{"Path":"$[\'properties\'][\'status\'][\'additionalDetails\']"}},{"column":"properties_authenticationProcessingDetails", "Properties":{"Path":"$[\'properties\'][\'authenticationProcessingDetails\']"}},{"column":"properties_clientAppUsed", "Properties":{"Path":"$[\'properties\'][\'clientAppUsed\']"}},{"column":"properties_userAgent", "Properties":{"Path":"$[\'properties\'][\'userAgent\']"}},{"column":"properties_conditionalAccessStatus", "Properties":{"Path":"$[\'properties\'][\'conditionalAccessStatus\']"}},{"column":"properties_authenticationContextClassReferences", "Properties":{"Path":"$[\'properties\'][\'authenticationContextClassReferences\']"}},{"column":"properties_originalRequestId", "Properties":{"Path":"$[\'properties\'][\'originalRequestId\']"}},{"column":"properties_isTenantRestricted", "Properties":{"Path":"$[\'properties\'][\'isTenantRestricted\']"}},{"column":"properties_networkLocationDetails", "Properties":{"Path":"$[\'properties\'][\'networkLocationDetails\']"}},{"column":"properties_clientCredentialType", "Properties":{"Path":"$[\'properties\'][\'clientCredentialType\']"}},{"column":"properties_riskLevelAggregated", "Properties":{"Path":"$[\'properties\'][\'riskLevelAggregated\']"}},{"column":"properties_riskLevelDuringSignIn", "Properties":{"Path":"$[\'properties\'][\'riskLevelDuringSignIn\']"}},{"column":"properties_riskState", "Properties":{"Path":"$[\'properties\'][\'riskState\']"}},{"column":"properties_signInIdentifier", "Properties":{"Path":"$[\'properties\'][\'signInIdentifier\']"}},{"column":"properties_riskEventTypes_v2", "Properties":{"Path":"$[\'properties\'][\'riskEventTypes_v2\']"}},{"column":"properties_resourceDisplayName", "Properties":{"Path":"$[\'properties\'][\'resourceDisplayName\']"}},{"column":"properties_resourceServicePrincipalId", "Properties":{"Path":"$[\'properties\'][\'resourceServicePrincipalId\']"}},{"column":"properties_homeTenantId", "Properties":{"Path":"$[\'properties\'][\'homeTenantId\']"}},{"column":"properties_authenticationRequirement", "Properties":{"Path":"$[\'properties\'][\'authenticationRequirement\']"}},{"column":"properties_alternateSignInName", "Properties":{"Path":"$[\'properties\'][\'alternateSignInName\']"}},{"column":"properties_servicePrincipalId", "Properties":{"Path":"$[\'properties\'][\'servicePrincipalId\']"}},{"column":"properties_userType", "Properties":{"Path":"$[\'properties\'][\'userType\']"}},{"column":"properties_flaggedForReview", "Properties":{"Path":"$[\'properties\'][\'flaggedForReview\']"}},{"column":"properties_autonomousSystemNumber", "Properties":{"Path":"$[\'properties\'][\'autonomousSystemNumber\']"}},{"column":"properties_crossTenantAccessType", "Properties":{"Path":"$[\'properties\'][\'crossTenantAccessType\']"}},{"column":"properties_ssoExtensionVersion", "Properties":{"Path":"$[\'properties\'][\'ssoExtensionVersion\']"}},{"column":"properties_uniqueTokenIdentifier", "Properties":{"Path":"$[\'properties\'][\'uniqueTokenIdentifier\']"}},{"column":"properties_authenticationProtocol", "Properties":{"Path":"$[\'properties\'][\'authenticationProtocol\']"}},{"column":"properties_rngcStatus", "Properties":{"Path":"$[\'properties\'][\'rngcStatus\']"}}]'

// Ingest data into table command
///////////////////////////////////////////////////////////
.ingest async into table ['adtest'] (h'<blob path to upload>') with (format='multijson',ingestionMappingReference='adtest_mapping',ingestionMappingType='json',tags="['58fd89d8-394b-4999-bdc4-714b20da1c2c']")

.drop table  ['adtest']

adtest
| limit 10 

iamlogssignin
| limit 10

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
deviceos = tostring(r.deviceDetail.operatingSystem), devicebrowser = tostring(r.deviceDetail.browser)
//| distinct callerIpAddress, identity
| project geocolatitude, geocolongitude, operationName
//| render scatterchart with (kind = map)
| render scatterchart with (kind = map, xcolumn = geocolongitude, ycolumns = geocolatitude, series = operationName)

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| distinct callerIpAddress, loc1city, loc1state, geocolatitude, geocolongitude

.create table OfficeMeta ( callerIpAddress:string, city:string , state:string, latitude:string, longitude:string )

.set-or-append OfficeMeta <| (iamlogssignin
    | mv-expand  r = data.records
    | project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
    rlocal = tostring(r.location), city = tostring(r.properties.location.city), state = tostring(r.properties.location.state),
    latitude = tostring(r.properties.location.geoCoordinates.latitude),
    longitude = tostring(r.properties.location.geoCoordinates.longitude),
    logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
    | distinct callerIpAddress, city, state, latitude, longitude)

.set async OfficeMeta with(distributed=true) <| iamlogssignin
    | mv-expand  r = data.records
    | project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
    rlocal = tostring(r.location), city = tostring(r.properties.location.city), state = tostring(r.properties.location.state),
    latitude = tostring(r.properties.location.geoCoordinates.latitude),
    longitude = tostring(r.properties.location.geoCoordinates.longitude),
    logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
    | distinct callerIpAddress, city, state, latitude, longitude

OfficeMeta

Officelocations
| limit 10

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
| summarize count() by bin(logintime, 1d)

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
| where OfficeProvider == 'Att'
| summarize location=max(OfficeProvider), peoplecount = count() by bin(logintime, 1d)

.show database iamlogs principals


iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
//| where OfficeProvider has_any (_OfficeProvider)
//| where logintime  between (_startTime.._endTime)
| summarize location=max(OfficeProvider), peoplecount = count() by bin(logintime, 1d)
| project location, peoplecount, logintime
| make-series num=count() default=0 on logintime step 1h by location
| extend y_forcasted = series_decompose_forecast(todynamic(tostring(num)), 24*7)  // forecast a week forward
| extend ma_num=series_fir(num, repeat(1, 5), true, true)
| render timechart 


iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
//| where OfficeProvider has_any (_OfficeProvider)
//| where logintime  between (_startTime.._endTime)
//| summarize location=max(OfficeProvider), peoplecount = count() by bin(logintime, 1d)
| evaluate autocluster()


iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
//| distinct callerIpAddress, identity
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
| where logintime  between (_startTime.._endTime)
| where OfficeProvider has_any (_OfficeProvider)
| project geocolatitude, geocolongitude, operationName, OfficeProvider, identity, callerIpAddress
| summarize peoplecount = dcount(callerIpAddress), identitycount=dcount(identity) by OfficeProvider, geocolongitude = tostring(geocolongitude), geocolatitude = tostring(geocolatitude)
//| render scatterchart with (kind = map)
//| render scatterchart with (kind = map, xcolumn = geocolongitude, ycolumns = geocolatitude, series = OfficeProvider)

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
| where isempty(loc1state)
//| project geocolatitude, geocolongitude, loc1city, loc1state, callerIpAddress, identity
| distinct identity

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
| where isnotempty(loc1state)
//| project geocolatitude, geocolongitude, loc1city, loc1state, callerIpAddress, identity
| distinct identity

.create table employees ( EmployeeName:string, ID:string , city:string, state:string, latitude:string, longitude:string )

.set-or-append employees <| (iamlogssignin
    | mv-expand  r = data.records
    | project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
    rlocal = tostring(r.location), city = tostring(r.properties.location.city), state = tostring(r.properties.location.state),
    latitude = tostring(r.properties.location.geoCoordinates.latitude),
    longitude = tostring(r.properties.location.geoCoordinates.longitude),
    logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName),
    userid = tostring(r.properties.userid)
    | distinct identity, userid, city, state, latitude, longitude)

employees
| limit 1000 

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
//| where OfficeProvider has_any (_OfficeProvider)
//| where logintime  between (_startTime.._endTime)
| summarize location=max(OfficeProvider), peoplecount = count() by bin(logintime, 1d)
| project location, peoplecount, logintime
| make-series num=count() default=0 on logintime step 1d by location
| extend y_forcasted = series_decompose_forecast(todynamic(tostring(num)), 24*7)  // forecast a week forward
| extend ma_num=series_fir(num, repeat(1, 5), true, true)
| render timechart 

iamlogssignin
| mv-expand  r = data.records
| project callerIpAddress = tostring(r.callerIpAddress), identity = tostring(r.identity), 
rlocal = tostring(r.location), loc1city = tostring(r.properties.location.city), loc1state = tostring(r.properties.location.state),
geocolatitude = tostring(r.properties.location.geoCoordinates.latitude),
geocolongitude = tostring(r.properties.location.geoCoordinates.longitude),
logintime = todatetime(tostring(r.['time'])), operationName = tostring(r.operationName)
| join kind=inner Officelocations on $left.callerIpAddress == $right.callerIpAddress
//| where OfficeProvider has_any (_OfficeProvider)
//| where logintime  between (_startTime.._endTime)
//| where identity  has_any (_employee)
| summarize location=max(OfficeProvider), peoplecount = dcount(identity) by bin(logintime, 1d)
| project location, peoplecount, logintime
| make-series y=max(peoplecount) on logintime from ago(7d) to datetime(now)+24*7*5h step 1d // create a time series of 5 weeks (last week is empty)
| extend y_forcasted = series_decompose_forecast(todynamic(tostring(y)), 1*7, 168, 'linefit', 0.4)  // forecast a week forward
| render timechart 
